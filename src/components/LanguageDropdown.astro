---
import i18next from "i18next";
const { ismobile } = Astro.props;

const languageNames: { [key: string]: string } = {
  en: "English",
  "en-GB": "British English",
  es: "Español",
  "es-LAT": "Español (Latinoamérica)",
  fr: "Français",
  ja: "日本語",
  "pt-PT": "Português (Portugal)",
  "pt-BR": "Português (Brasil)",
  ca: "Català",
  va: "Valencià",
  frp: "Arpetan",
  de: "Deutsch",
  it: "Italiano",
  fi: "Suomi",
  ru: "Русский",
  vi: "Tiếng Việt",
  tr: "Türkçe",
  hu: "Magyar",
  "ko-KR": "한국어"
};

function getLanguageName(code: string) {
  return languageNames[code] || code.toUpperCase();
}

function removeLangFromRoute(route: string) {
  const segments = route.split("/");
  if (i18next.languages.includes(segments[1])) {
    segments.splice(1, 1);
  }
  return segments.join("/");
}

const currentRoute = removeLangFromRoute(Astro.url.pathname);
---

{
  (
    <div class={`lang-dropdown-container ${ismobile ? 'mobile' : ''}`}>
      <button
        onclick={`toggleLangDropdown('${ismobile ? 'mobileLangDropdown' : 'langDropdown'}')`}
        class={`btn ${ismobile ? 'btn-mobile' : ''}`}
        id={`${ismobile ? 'mobileTitleTranslate' : 'titleTranslate'}`}
        style={ismobile ? 
          "width:100%; padding:18px; display:flex; align-items:center; justify-content:center; gap:10px; background:var(--bg-color-tertiary); border-radius:4px 4px 18px 18px;" : 
          "width:100%; padding:8px; display:flex; align-items:center; gap:10px; border-radius:4px;"}
        type="button"
        aria-expanded="false"
        aria-label="Language Picker">
        <img
          src={`/img/flags/${i18next.language}.webp`}
          alt={`${getLanguageName(i18next.language)} Flag`}
          style= "width:25px; height:25px;"
        />
        <span style="color:var(--text-color);">{getLanguageName(i18next.language)}</span>
      </button>

      <div
        id={ismobile ? 'mobileLangDropdown' : 'langDropdown'}
        class="dropdown-menu"
        style="display:none; background-color:var(--bg-color-light); transform:translate(0, 3px); border:1px solid var(--border-color); border-radius:12px; overflow:hidden; position:absolute; left:0; width:100%; top:100%; z-index:1000;">
        <ul style="max-height:255px; overflow-y:auto; padding:8px; padding-top: 0px; margin: 0 !important;">
          {i18next.languages
            .filter(lang => lang !== i18next.language)
            .map(lang => (
              <li>
                <a
                  href={
                    lang === "en" ? currentRoute : `/${lang}${currentRoute}`
                  }
                  class="lang-option"
                  style="padding:8px; display:flex; align-items:center; gap:8px; color:var(--text-color); text-decoration:none; border-radius:4px;">
                  <img
                    src={`/img/flags/${lang}.webp`}
                    alt={`${lang} flag`}
                    style="width:20px; height:20px;"
                  />
                  {getLanguageName(lang)}
                </a>
              </li>
            ))}
        </ul>
      </div>
    </div>
  )
}

<style>
  .lang-dropdown-container {
    position: relative;
  }

  .btn:hover {
    background-color: var(--bg-select);
  }

  .lang-dropdown-container.mobile {
    width: 100%;
    margin: 10px 0;
  }

  .lang-option:hover {
    background-color: var(--bg-opaque-1);
  }

  .dropdown-menu {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .btn-mobile {
    width: 100%;
    text-align: left;
    border: none;
    cursor: pointer;
  }

  .btn-mobile:hover {
    background-color: var(--bg-opaque-1) !important;
  }
</style>

<script is:inline>
  function toggleLangDropdown(id) {
    const dropdown = document.getElementById(id);
    if (!dropdown) return;

    const isVisible = dropdown.style.display === "block";
    dropdown.style.display = isVisible ? "none" : "block";
  }

  // Close dropdown when clicking outside
  document.addEventListener("click", function (event) {
    const dropdowns = ['langDropdown', 'mobileLangDropdown'];
    const buttons = ['titleTranslate', 'mobileTitleTranslate'];
    
    dropdowns.forEach((id, index) => {
      const dropdown = document.getElementById(id);
      const button = document.getElementById(buttons[index]);

      if (!dropdown || !button) return;

      if (!dropdown.contains(event.target) && !button.contains(event.target)) {
        dropdown.style.display = "none";
      }
    });
  });
</script>
